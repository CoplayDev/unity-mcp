name: Claude NL suite (Unity live)

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  UNITY_VERSION: 2021.3.45f1
  UNITY_IMAGE: unityci/editor:ubuntu-2021.3.45f1-linux-il2cpp-3
  UNITY_CACHE_ROOT: /home/runner/work/_temp/_github_home

jobs:
  nl-suite:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # ---------- Detect secrets ----------
      - name: Detect secrets (outputs)
        id: detect
        env:
          UNITY_LICENSE:  ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL:   ${{ secrets.UNITY_SERIAL }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          set -e
          if [ -n "$ANTHROPIC_API_KEY" ]; then echo "anthropic_ok=true" >> "$GITHUB_OUTPUT"; else echo "anthropic_ok=false" >> "$GITHUB_OUTPUT"; fi
          if [ -n "$UNITY_LICENSE" ] || { [ -n "$UNITY_EMAIL" ] && [ -n "$UNITY_PASSWORD" ]; } || [ -n "$UNITY_SERIAL" ]; then
            echo "unity_ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "unity_ok=false" >> "$GITHUB_OUTPUT"
          fi

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Python env for MCP server (uv) ----------
      - uses: astral-sh/setup-uv@v4
        with:
          python-version: '3.11'

      - name: Install MCP server
        run: |
          set -eux
          uv venv
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> "$GITHUB_ENV"
          echo "$GITHUB_WORKSPACE/.venv/bin" >> "$GITHUB_PATH"
          if [ -f UnityMcpBridge/UnityMcpServer~/src/pyproject.toml ]; then
            uv pip install -e UnityMcpBridge/UnityMcpServer~/src
          elif [ -f UnityMcpBridge/UnityMcpServer~/src/requirements.txt ]; then
            uv pip install -r UnityMcpBridge/UnityMcpServer~/src/requirements.txt
          elif [ -f UnityMcpBridge/UnityMcpServer~/pyproject.toml ]; then
            uv pip install -e UnityMcpBridge/UnityMcpServer~/
          elif [ -f UnityMcpBridge/UnityMcpServer~/requirements.txt ]; then
            uv pip install -r UnityMcpBridge/UnityMcpServer~/requirements.txt
          else
            echo "No MCP Python deps found (skipping)"
          fi

      # ---------- License prime on host (handles ULF or EBL) ----------
      - name: Prime Unity license on host (GameCI)
        if: steps.detect.outputs.unity_ok == 'true'
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE:  ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL:   ${{ secrets.UNITY_SERIAL }}
        with:
          projectPath: TestProjects/UnityMCPTests
          testMode: EditMode
          customParameters: -runTests -testFilter __NoSuchTest__ -batchmode -nographics
          unityVersion: ${{ env.UNITY_VERSION }}

      # (Optional) Show where the license actually got written
      - name: Inspect GameCI license caches (host)
        if: steps.detect.outputs.unity_ok == 'true'
        run: |
          set -eux
          find "${{ env.UNITY_CACHE_ROOT }}" -maxdepth 4 \( -path "*/.cache" -prune -o -type f \( -name '*.ulf' -o -name 'user.json' \) -print \) 2>/dev/null || true

      # ---------- Start headless Unity that stays up (bridge enabled) ----------
      - name: Start Unity (persistent bridge)
        if: steps.detect.outputs.unity_ok == 'true'
        env:
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL:   ${{ secrets.UNITY_SERIAL }}
        run: |
          set -eu
          if [ ! -d "${{ github.workspace }}/TestProjects/UnityMCPTests/ProjectSettings" ]; then
            echo "Unity project not found; failing fast."
            exit 1
          fi
          mkdir -p "$HOME/.unity-mcp"
          MANUAL_ARG=()
          if [ -f "${UNITY_CACHE_ROOT}/.local/share/unity3d/Unity_lic.ulf" ]; then
            MANUAL_ARG=(-manualLicenseFile /root/.local/share/unity3d/Unity_lic.ulf)
          fi
          EBL_ARGS=()
          [ -n "${UNITY_SERIAL:-}" ]   && EBL_ARGS+=(-serial "$UNITY_SERIAL")
          [ -n "${UNITY_EMAIL:-}" ]    && EBL_ARGS+=(-username "$UNITY_EMAIL")
          [ -n "${UNITY_PASSWORD:-}" ] && EBL_ARGS+=(-password "$UNITY_PASSWORD")
          docker run -d --name unity-mcp --network host \
            -e HOME=/root \
            -e UNITY_MCP_ALLOW_BATCH=1 -e UNITY_MCP_STATUS_DIR=/root/.unity-mcp \
            -v "${{ github.workspace }}:/workspace" -w /workspace \
            -v "${{ env.UNITY_CACHE_ROOT }}:/root" \
            -v "$HOME/.unity-mcp:/root/.unity-mcp" \
            ${{ env.UNITY_IMAGE }} /opt/unity/Editor/Unity -batchmode -nographics -logFile - \
              -projectPath /workspace/TestProjects/UnityMCPTests \
              "${MANUAL_ARG[@]}" \
              "${EBL_ARGS[@]}" \
              -executeMethod UnityMcpBridge.Editor.UnityMcpBridge.StartAutoConnect

      # ---------- Wait for Unity bridge (fail fast if not running/ready) ----------
      - name: Wait for Unity bridge
        if: steps.detect.outputs.unity_ok == 'true'
        run: |
          set -eux
          if ! docker ps --format '{{.Names}}' | grep -qx 'unity-mcp'; then
            echo "Unity container failed to start"; docker ps -a || true; exit 1
          fi
          docker logs -f unity-mcp & LOGPID=$!
          deadline=$((SECONDS+420))
          while [ $SECONDS -lt $deadline ]; do
            if docker logs unity-mcp 2>&1 | grep -qE "MCP Bridge listening|Bridge ready|Server started|Pro License: YES"; then
              echo "Bridge ready (logs)"; kill $LOGPID || true; exit 0
            fi
            PORT=$(python -c "import os,glob,json,sys; b=os.path.expanduser('~/.unity-mcp'); fs=sorted(glob.glob(os.path.join(b,'unity-mcp-status-*.json')), key=os.path.getmtime, reverse=True); print(json.load(open(fs[0]))['unity_port']) if fs else sys.exit(1)" 2>/dev/null || true)
            if [ -n "${PORT:-}" ] && timeout 1 bash -lc "exec 3<>/dev/tcp/127.0.0.1/$PORT && head -c 256 <&3 | tr -d '\0' | grep -q 'FRAMING=1'"; then
              echo "Bridge ready on port $PORT"; kill $LOGPID || true; exit 0
            fi
            sleep 2
          done
          echo "Bridge not ready in time"
          kill $LOGPID || true
          docker logs unity-mcp || true
          exit 1

      # ---------- Prepare reports ----------
      - name: Prepare NL/T reports dir
        run: |
          set -eux
          mkdir -p reports
          : > reports/claude-nl-tests.xml
          : > reports/claude-nl-tests.md

      # ---------- Claude NL/T suite (full) ----------
      - name: Claude NL/T suite (full)
        uses: anthropics/claude-code-base-action@beta
        if: steps.detect.outputs.anthropic_ok == 'true'
        with:
          prompt_file: .claude/prompts/nl-unity-suite-full.md
          allowed_tools: >  # RESTRICTED like “71”
            Bash(git:*),Read,Write,LS,Glob,Grep,
            ListMcpResourcesTool,ReadMcpResourceTool,
            mcp__unity__script_apply_edits,mcp__unity__apply_text_edits,
            mcp__unity__create_script,mcp__unity__delete_script,
            mcp__unity__validate_script,mcp__unity__manage_script,
            mcp__unity__manage_scene,mcp__unity__manage_editor,
            mcp__unity__manage_gameobject,mcp__unity__manage_asset,
            mcp__unity__manage_shader,mcp__unity__read_console,
            mcp__unity__execute_menu_item,mcp__unity__list_resources,
            mcp__unity__read_resource,mcp__unity__find_in_file
          mcp_config: |
            {
              "mcpServers": {
                "unity": {
                  "command": "uv",
                  "args": ["run","--active","--directory","UnityMcpBridge/UnityMcpServer~/src","python","server.py"],
                  "transport": { "type": "stdio" },
                  "env": {
                    "PYTHONUNBUFFERED": "1",
                    "MCP_LOG_LEVEL": "debug",
                    "UNITY_PROJECT_ROOT": "${{ github.workspace }}/TestProjects/UnityMCPTests"
                  }
                }
              }
            }
          model: "claude-3-7-sonnet-20250219"
          max_turns: "250"
          timeout_minutes: "30"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

      # sanitize only the markdown (does not touch JUnit xml)
      - name: Sanitize NL/T markdown (UTF-8, strip NULs)
        if: always()
        run: |
          set -eu
          if [ -f reports/claude-nl-tests.md ]; then
            python - <<'PY'
            from pathlib import Path
            p=Path('reports/claude-nl-tests.md')
            b=p.read_bytes().replace(b'\x00', b'')
            s=b.decode('utf-8','replace').replace('\r\n','\n')
            p.write_text(s, encoding='utf-8', newline='\n')
            PY
          fi

      - name: Publish JUnit report
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: 'reports/claude-nl-tests.xml'
          require_tests: false
          annotate_notice: true

      - name: Upload NL/T artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-nl-suite-artifacts
          path: |
            reports/claude-nl-tests.xml
            reports/claude-nl-tests.md

      # ---------- Always stop Unity ----------
      - name: Stop Unity
        if: always()
        run: |
          docker logs unity-mcp || true
          docker rm -f unity-mcp || true
