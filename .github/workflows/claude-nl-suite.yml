name: Claude NL suite (Unity live)

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  nl-suite:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Detect secrets (outputs)
        id: detect
        run: |
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then echo "anthropic_ok=true" >> "$GITHUB_OUTPUT"; else echo "anthropic_ok=false" >> "$GITHUB_OUTPUT"; fi
          if [ -n "${{ secrets.UNITY_LICENSE }}" ]; then echo "unity_lic_ok=true" >> "$GITHUB_OUTPUT"; else echo "unity_lic_ok=false" >> "$GITHUB_OUTPUT"; fi
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # --- Python env for MCP server (uv) ---
      - uses: astral-sh/setup-uv@v4
        with: { python-version: '3.11' }
      - name: Install MCP server
        run: |
          set -eux
          uv venv
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> "$GITHUB_ENV"
          echo "$GITHUB_WORKSPACE/.venv/bin" >> "$GITHUB_PATH"
          if [ -f UnityMcpBridge/UnityMcpServer~/src/pyproject.toml ]; then
            uv pip install -e UnityMcpBridge/UnityMcpServer~/src
          elif [ -f UnityMcpBridge/UnityMcpServer~/src/requirements.txt ]; then
            uv pip install -r UnityMcpBridge/UnityMcpServer~/src/requirements.txt
          fi

      - name: Write Unity license (ULF) to host
        if: steps.detect.outputs.unity_lic_ok == 'true'
        run: |
          set -eux
          mkdir -p "$HOME/.local/share/unity3d" "$HOME/.config/unity3d" "$HOME/.cache/unity3d"
          printf '%s' "${{ secrets.UNITY_LICENSE }}" | tr -d '\r' > "$HOME/.local/share/unity3d/Unity_lic.ulf"
          test -s "$HOME/.local/share/unity3d/Unity_lic.ulf"

      - name: Activate Unity license (one-shot container)
        if: steps.detect.outputs.unity_lic_ok == 'true'
        run: |
          set -eux
          docker run --rm \
            -v "$HOME/.local/share/unity3d:/root/.local/share/unity3d" \
            -v "$HOME/.config/unity3d:/root/.config/unity3d" \
            -v "$HOME/.cache/unity3d:/root/.cache/unity3d" \
            -v "${{ github.workspace }}:/workspace" -w /workspace \
            unityci/editor:2021.3.45f1-base-3 \
            /opt/unity/Editor/Unity \
              -batchmode -nographics -quit -logFile - \
              -projectPath /workspace/TestProjects/UnityMCPTests \
              -manualLicenseFile /root/.local/share/unity3d/Unity_lic.ulf
          
      # --- Start headless Unity that stays up (bridge enabled) ---
      - name: Start Unity (persistent bridge)
        run: |
          set -eux
          mkdir -p "$HOME/.unity-mcp" \
                   "$HOME/.local/share/unity3d" \
                   "$HOME/.config/unity3d" \
                   "$HOME/.cache/unity3d"
          docker run -d --name unity-mcp \
            --network host \
            -e UNITY_MCP_ALLOW_BATCH=1 \
            -e UNITY_MCP_STATUS_DIR=/root/.unity-mcp \
            -v "${{ github.workspace }}:/workspace" -w /workspace \
            -v "$HOME/.local/share/unity3d:/root/.local/share/unity3d" \
            -v "$HOME/.config/unity3d:/root/.config/unity3d" \
            -v "$HOME/.cache/unity3d:/root/.cache/unity3d" \
            -v "$HOME/.unity-mcp:/root/.unity-mcp" \
            unityci/editor:2021.3.45f1-base-3 \
            /opt/unity/Editor/Unity \
              -batchmode -nographics -logFile - \
              -projectPath /workspace/TestProjects/UnityMCPTests \
              -executeMethod UnityMcpBridge.Editor.UnityMcpBridge.StartAutoConnect

      - name: Wait for Unity bridge
        run: |
          set -eux
          docker logs -f unity-mcp & LOGPID=$!
          deadline=$((SECONDS+420))
          while [ $SECONDS -lt $deadline ]; do
            # Prefer a log marker; adjust to your actual log text:
            if docker logs unity-mcp 2>&1 | grep -qE "MCP Bridge listening|Bridge ready|Server started"; then
              echo "Bridge ready (logs)"; kill $LOGPID || true; exit 0
            fi
            # Fallback: JSON + socket probe (optional)
            PORT=$(python -c "import os,glob,json,sys; b=os.path.expanduser('~/.unity-mcp'); fs=sorted(glob.glob(os.path.join(b,'unity-mcp-status-*.json')), key=os.path.getmtime, reverse=True); print(json.load(open(fs[0]))['unity_port']) if fs else sys.exit(1)" 2>/dev/null || true)
            if [ -n "${PORT:-}" ] && timeout 1 bash -lc "exec 3<>/dev/tcp/127.0.0.1/$PORT && head -c 256 <&3 | tr -d '\0' | grep -q 'FRAMING=1'"; then
              echo "Bridge ready on port $PORT"; kill $LOGPID || true; exit 0
            fi
            sleep 2
          done
          echo "Bridge not ready in time"
          kill $LOGPID || true
          docker logs unity-mcp || true
          exit 1

      - name: Verify license paths (host)
        run: |
          ls -la $HOME/.local/share/unity3d || true
          ls -la $HOME/.config/unity3d || true
          ls -la $HOME/.cache/unity3d || true

      - name: Verify license paths (container)
        run: |
          docker exec $(docker ps -q --filter name=unity-mcp) bash -lc '
            ls -la /root/.local/share/unity3d || true
            ls -la /root/.config/unity3d || true
            ls -la /root/.cache/unity3d || true
          '
        
      # --- Claude suites ---
      - name: Claude startup sanity
        id: claude_startup
        uses: anthropics/claude-code-base-action@beta
        if: steps.detect.outputs.anthropic_ok == 'true'
        with:
          prompt_file: .claude/prompts/nl-startuptest.md
          allowed_tools: >
            Bash(git:*),Read,Write,LS,Glob,Grep,
            ListMcpResourcesTool,ReadMcpResourceTool,
            mcp__unity__script_apply_edits,mcp__unity__apply_text_edits,
            mcp__unity__create_script,mcp__unity__delete_script,
            mcp__unity__validate_script,mcp__unity__manage_script,
            mcp__unity__manage_scene,mcp__unity__manage_editor,
            mcp__unity__manage_gameobject,mcp__unity__manage_asset,
            mcp__unity__manage_shader,mcp__unity__read_console,
            mcp__unity__execute_menu_item,mcp__unity__list_resources,
            mcp__unity__read_resource,mcp__unity__find_in_file
          mcp_config: |
            {
              "mcpServers": {
                "unity": {
                  "command": "uv",
                  "args": ["run","--active","--directory","UnityMcpBridge/UnityMcpServer~/src","python","server.py"],
                  "transport": { "type": "stdio" },
                  "env": {
                    "PYTHONUNBUFFERED": "1",
                    "MCP_LOG_LEVEL": "debug",
                    "UNITY_PROJECT_ROOT": "${{ github.workspace }}/TestProjects/UnityMCPTests"
                  }
                }
              }
            }
          model: "claude-3-7-sonnet-20250219"
          max_turns: "8"
          timeout_minutes: "7"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Claude NL/T suite
        uses: anthropics/claude-code-base-action@beta
        if: steps.detect.outputs.anthropic_ok == 'true' && steps.claude_startup.outcome == 'success'
        with:
          prompt_file: .claude/prompts/nl-unity-claude-tests-mini.md
          allowed_tools: >
            Bash(git:*),Read,Write,LS,Glob,Grep,
            ListMcpResourcesTool,ReadMcpResourceTool,
            mcp__unity__script_apply_edits,mcp__unity__apply_text_edits,
            mcp__unity__create_script,mcp__unity__delete_script,
            mcp__unity__validate_script,mcp__unity__manage_script,
            mcp__unity__manage_scene,mcp__unity__manage_editor,
            mcp__unity__manage_gameobject,mcp__unity__manage_asset,
            mcp__unity__manage_shader,mcp__unity__read_console,
            mcp__unity__execute_menu_item,mcp__unity__list_resources,
            mcp__unity__read_resource,mcp__unity__find_in_file
          mcp_config: |
            {
              "mcpServers": {
                "unity": {
                  "command": "uv",
                  "args": ["run","--active","--directory","UnityMcpBridge/UnityMcpServer~/src","python","server.py"],
                  "transport": { "type": "stdio" },
                  "env": {
                    "PYTHONUNBUFFERED": "1",
                    "MCP_LOG_LEVEL": "debug",
                    "UNITY_PROJECT_ROOT": "${{ github.workspace }}/TestProjects/UnityMCPTests"
                  }
                }
              }
            }
          model: "claude-3-7-sonnet-20250219"
          max_turns: "16"
          timeout_minutes: "12"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

      # --- Always stop Unity ---
      - name: Stop Unity
        if: always()
        run: |
          docker logs unity-mcp || true
          docker rm -f unity-mcp || true
